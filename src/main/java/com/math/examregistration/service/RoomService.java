package com.math.examregistration.service;

import com.math.examregistration.entity.Room;
import com.math.examregistration.repository.RoomRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class RoomService {

    private final RoomRepository roomRepository;

    /**
     * ğŸ”¹ BoÅŸ otaÄŸÄ± tap (capacity > currentCount)
     */
    public Room assignAvailableRoom() {
        return roomRepository.findAvailableRoom()
                .orElseThrow(() -> new RuntimeException("BoÅŸ otaq yoxdur!"));
    }

    /**
     * ğŸ”¹ Otaq doluluÄŸunu 1 artÄ±r
     */
    @Transactional
    public void incrementRoomCount(Room room) {
        if (room.getCurrentCount() >= room.getCapacity()) {
            throw new RuntimeException("Otaq artÄ±q doludur!");
        }
        room.setCurrentCount(room.getCurrentCount() + 1);
        roomRepository.save(room);
        log.info("Otaq #{} Ã¼Ã§Ã¼n say artÄ±rÄ±ldÄ± â†’ cari say: {}", room.getRoomNo(), room.getCurrentCount());
    }

    /**
     * ğŸ”¹ BÃ¼tÃ¼n otaqlarÄ± gÉ™tir (doluluq mÉ™lumatÄ± ilÉ™)
     */
    public List<Room> getAllRooms() {
        List<Room> rooms = roomRepository.findAll();
        log.info("SistemdÉ™ {} otaq tapÄ±ldÄ±", rooms.size());
        return rooms;
    }

    /**
     * ğŸ”¹ Yeni otaq É™lavÉ™ et
     */
    public Room addRoom(Room room) {
        if (room.getCapacity() <= 0) {
            throw new IllegalArgumentException("OtaÄŸÄ±n tutumu 0-dan bÃ¶yÃ¼k olmalÄ±dÄ±r!");
        }
        room.setCurrentCount(0);
        Room saved = roomRepository.save(room);
        log.info("Yeni otaq É™lavÉ™ edildi: #{} (Tutum: {})", saved.getRoomNo(), saved.getCapacity());
        return saved;
    }

    /**
     * ğŸ”¹ Otaq mÉ™lumatÄ±nÄ± yenilÉ™
     */
    @Transactional
    public Room updateRoom(Long id, Room updatedRoom) {
        Room existingRoom = roomRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Otaq tapÄ±lmadÄ±!"));

        if (updatedRoom.getCapacity() < existingRoom.getCurrentCount()) {
            throw new IllegalArgumentException("Yeni tutum mÃ¶vcud doluluqdan az ola bilmÉ™z!");
        }

        existingRoom.setRoomNo(updatedRoom.getRoomNo());
        existingRoom.setCapacity(updatedRoom.getCapacity());

        Room saved = roomRepository.save(existingRoom);
        log.info("Otaq #{} mÉ™lumatlarÄ± yenilÉ™ndi", saved.getRoomNo());
        return saved;
    }

    /**
     * ğŸ”¹ OtaÄŸÄ± sil
     */
    public void deleteRoom(Long id) {
        if (!roomRepository.existsById(id)) {
            throw new RuntimeException("SilinÉ™cÉ™k otaq tapÄ±lmadÄ±!");
        }
        roomRepository.deleteById(id);
        log.info("Otaq #{} silindi", id);
    }

    /**
     * ğŸ”¹ Qalan yerlÉ™rin sayÄ±nÄ± gÃ¶stÉ™r
     */
    public int getRemainingSeats(Long roomId) {
        Room room = roomRepository.findById(roomId)
                .orElseThrow(() -> new RuntimeException("Otaq tapÄ±lmadÄ±!"));
        int remaining = room.getCapacity() - room.getCurrentCount();
        log.info("Otaq #{} Ã¼Ã§Ã¼n qalan yerlÉ™r: {}", room.getRoomNo(), remaining);
        return remaining;
    }

    public int getTotalCapacity() {
        int total = roomRepository.getTotalCapacity();
        log.info("BÃ¼tÃ¼n otaqlarÄ±n Ã¼mumi tutumu: {}", total);
        return total;
    }
    public int getTotalCurrentCount() {
        int total = roomRepository.getTotalCurrentCount();
        log.info("BÃ¼tÃ¼n otaqlarda hal-hazÄ±rda olan tÉ™lÉ™bÉ™lÉ™rin Ã¼mumi sayÄ±: {}", total);
        return total;
    }

}
